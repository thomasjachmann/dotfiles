#!/bin/bash

set -e

source_dir=$(grealpath $(dirname $(grealpath $0))/../..)
destination_dir=$HOME
data_dir=${XDG_DATA_HOME:-$HOME/.local/share}/dotfiles
mkdir -p $data_dir

source $source_dir/_helpers.zsh

function checkpackage {
  local package=$1

  local package_dir=$source_dir/$package
  [ -d $package_dir ] || (red "package \"$package\" does not exist" 1>&2 && exit 1)
}

function chezmoipackage {
  local package=$1
  shift

  checkpackage "$package"
  local package_dir=$source_dir/$package

  chezmoi \
    --source="$package_dir" \
    --destination="$destination_dir" \
    --mode=symlink \
    "$@"
}

function cleanuppackage {
  local package=$1

  # TODO implement uninstallation
  # 1. use this to see if there are changes in the destination that might be destroyed
  #    chezmoipackage $package diff | grep "^diff" | sed 's/.* a\/\(.*\) b\/.*/\1/'
  # 2. use this to remove files/symlinks and optionally empty directories
  #    chezmoipackage $package managed

  red "uninstall not implemented yet" 1>&2 && exit 1
}

command=$1
[ "$#" == "0" ] || shift

case $command in

home)
  echo "$source_dir"
  ;;

edit)
  if [ "$#" == "0" ]; then
    cd "$source_dir"
    $EDITOR
  else
    # TODO This will open the editor in the root, not in the package directory
    # since chezmoi seems to go to the git repo root instead of the given
    # source directory, but --apply or --watch switches still work
    package=$1
    shift
    chezmoipackage "$package" edit "$@"
  fi
  ;;

install)
  for package in "$@"; do
    green "installing $package"
    chezmoipackage "$package" apply
    echo "$package" >> "$data_dir/installed"
    sort --unique "$data_dir/installed" > "$data_dir/installed.new"
    mv "$data_dir/installed.new" "$data_dir/installed"
  done
  green "installed packages $*"
  ;;

uninstall)
  for package in "$@"; do
    green "uninstalling $package"
    cleanuppackage "$package"
    sed "/^${package//\//\\/}$/d" "$data_dir/installed" > "$data_dir/installed.new"
    mv "$data_dir/installed.new" "$data_dir/installed"
  done
  green "uninstalled packages $*"
  yellow "be aware that none of the Brewfile dependencies or custom install steps have been uninstalled or reverted"
  ;;

list)
  if [ "$#" == "0" ]; then
    cat "$data_dir/installed"
  else
    result=0
    for package in "$@"; do
      checkpackage "$package"
      if grep "^$package$" "$data_dir/installed" > /dev/null 2>&1; then
        green "package $package is installed"
      else
        yellow "package $package is not installed"
        result=1
      fi
    done
    exit $result
  fi
  ;;

reinstall)
  packages=$(perl -pe 's/\n/ / unless eof' "$data_dir/installed")
  $0 install $packages
  ;;

add)
  package=$1
  shift
  chezmoipackage "$package" add "$@"
  $0 list "$package" > /dev/null 2>&1 && chezmoipackage "$package" apply
  ;;

diff)
  if [ "$#" == "0" ]; then
    packages=$(perl -pe 's/\n/ / unless eof' "$data_dir/installed")
    $0 diff $packages
  else
    for package in "$@"; do
      yellow "diffing package ${package}"
      chezmoipackage "$package" diff --pager=cat
    done
  fi
  ;;

chezmoi|cm)
  chezmoipackage "$@"
  ;;

*)
  echo "Usage: $0 command [parameter(s)]

Available commands:

    home                   displays the home of this dotfiles install

    edit [package [opts]]  open this dotfile home (the vault) in the editor
                           configured in \$EDITOR ($EDITOR)
                           When a package is given, you can pass in all args
                           chezmoi edit accepts, eg:
                           $0 edit homebrew .config/zsh/_homebrew.zshenv --watch

    install [package(s)]   installs given package(s), symlinking files and
                           running install scripts

    uninstall [package(s)] uninstalls given package(s)
                           This doesn't remove dependencies installed via
                           install scripts!

    list [package(s)]      lists all installed packages or checks whether given
                           packages are installed, fails if one isn't

    reinstall              reinstalls all installed packages (see list command)

    add [package] [file]   adds a file to a package
                           If the package is installed already, it is installed
                           again to convert the added file to a symlink. You can also
                           pass in all args chezmoi add accepts, eg:
                           $0 add pkg .config/pkg/config --template

    diff [package(s)]      shows what differs between source and destination
                           If no package is given, then all installed packages
                           will be diffed.

    chezmoi package [opts] run arbitrary chezmoi commands within the context of
                           a package, also aliased to cm"

  exit 1
  ;;

esac
