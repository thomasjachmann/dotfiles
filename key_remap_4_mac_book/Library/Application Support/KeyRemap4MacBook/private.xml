<?xml version="1.0"?>
<root>
  <appdef>
    <appname>ESCAPABLE</appname>
    <equal>com.apple.Terminal</equal>
    <equal>iTerm</equal>
    <equal>net.sourceforge.iTerm</equal>
    <equal>com.googlecode.iterm2</equal>
    <equal>org.vim.MacVim</equal>
    <equal>com.github.atom</equal>
  </appdef>
  <appdef>
    <appname>TMUX</appname>
    <equal>iTerm</equal>
    <equal>net.sourceforge.iTerm</equal>
    <equal>com.googlecode.iterm2</equal>
  </appdef>

  <item>
    <name>Shift Keys</name>

    <item>
      <name>Shift to tab navigation (except tmux)</name>
      <identifier>private.left_shift_to_tab_navigation</identifier>
      <not>TMUX</not>
      <autogen>
        __KeyOverlaidModifier__
        KeyCode::SHIFT_L, ModifierFlag::SHIFT_L,
        KeyCode::SHIFT_L,
        KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L
      </autogen>
      <autogen>
        __KeyOverlaidModifier__
        KeyCode::SHIFT_R, ModifierFlag::SHIFT_R,
        KeyCode::SHIFT_R,
        KeyCode::CURSOR_RIGHT, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L
      </autogen>
    </item>

    <item>
      <name>Shift to tab navigation (tmux)</name>
      <identifier>private.left_shift_to_window_navigation</identifier>
      <only>TMUX</only>
      <autogen>
        __KeyOverlaidModifier__
        KeyCode::SHIFT_L, ModifierFlag::SHIFT_L,
        KeyCode::SHIFT_L,
        KeyCode::B, ModifierFlag::CONTROL_L, KeyCode::P
      </autogen>
      <autogen>
        __KeyOverlaidModifier__
        KeyCode::SHIFT_R, ModifierFlag::SHIFT_R,
        KeyCode::SHIFT_R,
        KeyCode::B, ModifierFlag::CONTROL_L, KeyCode::N
      </autogen>
    </item>
  </item>


  <item>
    <name>Hyper Key</name>

    <item>
      <name>fn to fn and Escape</name>
      <appendix>This one acts on the fn key.</appendix>
      <appendix>Modifier use acts as always.</appendix>
      <appendix>Single press just sends ESC.</appendix>
      <identifier>private.fn_to_command_and_escape</identifier>
      <autogen>
        __KeyOverlaidModifier__
        KeyCode::FN,
        KeyCode::FN,
        KeyCode::ESCAPE
      </autogen>
    </item>

    <item>
      <name>Command to Command and Escape</name>
      <appendix>This one acts on both command keys.</appendix>
      <appendix>Modifier use acts as always.</appendix>
      <appendix>Single press just sends ESC.</appendix>
      <identifier>private.command_to_command_and_escape</identifier>
      <only>ESCAPABLE</only>
      <autogen>
        __KeyOverlaidModifier__
        KeyCode::COMMAND_L,
        KeyCode::COMMAND_L,
        KeyCode::ESCAPE
      </autogen>
      <autogen>
        __KeyOverlaidModifier__
        KeyCode::COMMAND_R,
        KeyCode::COMMAND_R,
        KeyCode::ESCAPE
      </autogen>
    </item>

    <item>
      <name>Command-Comma to Command Comma</name>
      <appendix>Cmd-, just sends a Cmd and comma to prevent accidental</appendix>
      <appendix>preference pane display in MacVim when doing</appendix>
      <appendix>Cmd (aka Esc) ,w for writing a file</appendix>
      <identifier>private.command_comma_to_comma</identifier>
      <only>ESCAPABLE</only>
      <autogen>
        __KeyToKey__
        KeyCode::COMMA, ModifierFlag::COMMAND_L,
        KeyCode::COMMAND_L, KeyCode::COMMA
      </autogen>
      <autogen>
        __KeyToKey__
        KeyCode::COMMA, ModifierFlag::COMMAND_R,
        KeyCode::COMMAND_R, KeyCode::COMMA
      </autogen>
    </item>

    <item>
      <name>Right Control to Hyper (except in tmux)</name>
      <appendix>This one acts on the right control key</appendix>
      <appendix>which doesn't exist physically on mobile apple keyboards,</appendix>
      <appendix>so use PCKeyboardHack to map anything you want to that key, eg caps lock).</appendix>
      <appendix>Modifier use acts as if all modifiers (ctrl+option+cmd+shift) were pressed.</appendix>
      <identifier>private.control_r_to_hyper</identifier>
      <not>TMUX</not>
      <autogen>
        __KeyToKey__
        KeyCode::CONTROL_R,
        KeyCode::COMMAND_L, ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L
      </autogen>
    </item>

    <item>
      <name>Right Control to Hyper and Ctrl-B (for tmux)</name>
      <appendix>This one acts on the right control key</appendix>
      <appendix>which doesn't exist physically on mobile apple keyboards,</appendix>
      <appendix>so use PCKeyboardHack to map anything you want to that key, eg caps lock).</appendix>
      <appendix>Modifier use acts as if all modifiers (ctrl+option+cmd+shift) were pressed.</appendix>
      <appendix>Single press just sends Ctrl-B.</appendix>
      <identifier>private.control_r_to_hyper_and_ctrl_b</identifier>
      <only>TMUX</only>
      <autogen>
        __KeyOverlaidModifier__
        KeyCode::CONTROL_R,
        KeyCode::COMMAND_L, ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
        KeyCode::B, ModifierFlag::CONTROL_L
      </autogen>
    </item>

    <item>
      <name>Right Control to Hyper and Escape</name>
      <appendix>This one acts on the right control key</appendix>
      <appendix>which doesn't exist physically on mobile apple keyboards,</appendix>
      <appendix>so use PCKeyboardHack to map anything you want to that key, eg caps lock).</appendix>
      <appendix>Modifier use acts as if all modifiers (ctrl+option+cmd+shift) were pressed.</appendix>
      <appendix>Single press just sends ESC.</appendix>
      <identifier>private.control_r_to_hyper_and_escape</identifier>
      <autogen>
        __KeyOverlaidModifier__
        KeyCode::CONTROL_R,
        KeyCode::COMMAND_L, ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
        KeyCode::ESCAPE
      </autogen>
    </item>

    <item>
      <name>Space to Hyper and Space</name>
      <appendix>Modifier use acts as if all modifiers (ctrl+option+cmd+shift) were pressed.</appendix>
      <appendix>Single press just sends Space.</appendix>
      <identifier>private.space_to_hyper_and_space</identifier>
      <autogen>
        __KeyOverlaidModifier__
        KeyCode::SPACE,
        KeyCode::COMMAND_L, ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
        KeyCode::SPACE
      </autogen>
    </item>

    <item>
      <name>Hyper hjkl to arrow keys (VIM bindings)</name>
      <identifier>private.hyper_hjkl_to_arrows</identifier>
      <autogen>
        __KeyToKey__
        KeyCode::H, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
        KeyCode::CURSOR_LEFT
      </autogen>
      <autogen>
        __KeyToKey__
        KeyCode::J, ModifierFlag::COMMAND_L| ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
        KeyCode::CURSOR_DOWN
      </autogen>
      <autogen>
        __KeyToKey__
        KeyCode::K, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
        KeyCode::CURSOR_UP
      </autogen>
      <autogen>
        __KeyToKey__
        KeyCode::L, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
        KeyCode::CURSOR_RIGHT
      </autogen>
    </item>

    <item>
      <name>Hyper arrow keys to arrow keys</name>
      <identifier>private.hyper_arrows_to_arrows</identifier>
      <autogen>
        __KeyToKey__
        KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
        KeyCode::CURSOR_LEFT
      </autogen>
      <autogen>
        __KeyToKey__
        KeyCode::CURSOR_DOWN, ModifierFlag::COMMAND_L| ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
        KeyCode::CURSOR_DOWN
      </autogen>
      <autogen>
        __KeyToKey__
        KeyCode::CURSOR_UP, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
        KeyCode::CURSOR_UP
      </autogen>
      <autogen>
        __KeyToKey__
        KeyCode::CURSOR_RIGHT, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
        KeyCode::CURSOR_RIGHT
      </autogen>
    </item>

  </item>
</root>
